# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0

name                openafs-client
version             1.8.7
revision            4
categories          sysutils
license             IPL-1
platforms           darwin
maintainers         mit.edu:sipb-macathena
description         AFS distributed fileystem client
long_description    AFS is a distributed filesystem allowing cross-platform \
                    sharing of files among multiple computers.  Facilities \
                    are provided for access control, authentication, backup \
                    and administrative management.
homepage            http://www.openafs.org/
master_sites        http://openafs.org/dl/openafs/${version}/
distname            openafs-${version}-src

checksums           openafs-1.8.7-src.tar.gz \
                    rmd160  7de7c8dbc49ac8834a2dff7e88aa2fed4cac1e58 \
                    sha256  68e9c0e067e6f7de8a9a6d154e322b841e50c6b39427948f11ae9de786443392 \
                    size    18096802 \
                    OpenAFS-1.8.7-osxsna3-Mojave.dmg \
                    rmd160  c9e4ef49bfc50a48e9cca93f1b551821aa5f6c27 \
                    sha256  7477e321399b6e26a3bc8eeb6a8d920b6b5ce8dc31eb4a2906617f61216b52d4 \
                    size    16961690 \
                    OpenAFS-1.8.7-osxsna3-Catalina-beta-1.dmg \
                    rmd160  65cc96079fc9583e5b89294ed887df9e20d94fe0 \
                    sha256  970937b22e3544b5fdd0869fd4725beb0141201ec9e3650f6a8e6a3e061b81ef \
                    size    16990843 \
                    OpenAFS-1.8.7-osxsna3-BigSur-beta-1.dmg \
                    rmd160  92c280691d8b7f234b2a1f06723f40abed9fc8cf \
                    sha256  8c94ef78270e5094b7f318f9391de9e88e52078d881274f434009f45240677dd \
                    size    17048350 \
                    CellServDB \
                    rmd160  e0995062877e21b6887b57399a0cc9ae057c4092 \
                    sha256  62e6510079f7565b7c642d7b799342bee36c89fe6d510bc24559785fabb1b2f2 \
                    size    36955

universal_variant   no

depends_run         port:perl5

if {${name} eq ${subport}} {
    worksrcdir openafs-${version}

    # Allow xcodebuild for the prefpane
    use_xcode           yes

    depends_build       port:swig-perl

    patchfiles \
        swig-com_err.patch \
        afsd_fuse.patch \
        xcodebuild.patch
    patch.args          -p1

    post-patch {
        reinplace "s|/var/db/openafs/etc|${prefix}/etc/openafs|" src/platform/DARWIN/afssettings.m
        # TODO: Reenable (and fix building) if we ever decide to install the prefpane.
        reinplace "s|@OSXSDK@|none|" src/platform/DARWIN/Makefile.in
    }
    configure.cflags-append \
                    -Wno-error=implicit-function-declaration
    if {${os.major} >= 13} {
        configure.args-append --disable-kernel-module
        depends_run-append port:openafs-signed-kext
    }

    post-destroot {
        # Create default config
        file mkdir ${destroot}${prefix}/etc/openafs
        system "echo athena.mit.edu > ${destroot}${prefix}/etc/openafs/ThisCell"
        file mkdir ${destroot}${prefix}/etc/openafs/config
        #ln -s ${prefix}/etc/openafs/ThisCell ${destroot}${prefix}/etc/openafs/config/ThisCell
        system "echo athena > ${destroot}${prefix}/etc/openafs/CellAlias"
        #ln -s ${prefix}/etc/openafs/CellAlias ${destroot}${prefix}/etc/openafs/config/CellAlias
    }

    destroot.target install dest

    master_sites-append http://grand.central.org/dl/cellservdb/:csdb
    distfiles-append CellServDB:csdb
    post-destroot {
        copy ${distpath}/CellServDB ${destroot}${prefix}/etc/openafs/CellServDB
    }
}

subport openafs-signed-kext {
    description Signed Kernel Extension for AFS on 10.9+
    long_description ${description}
    set mp.dist {
        13 9 Mavericks
        14 10 Yosemite
        15 11 ElCapitan
        16 12 Sierra
        17 13 HighSierra
        18 14 Mojave
        19 15 Catalina-beta-1
        20 16 BigSur-beta-1
    }
    foreach { mp.darwin mp.os mp.name } ${mp.dist} {
        if {${os.major} == ${mp.darwin}} {
            # https://download.sinenomine.net/openafs/bins/1.8.5/macos-10.15/OpenAFS-1.8.5-osxsna3-Catalina.dmg
            master_sites https://download.sinenomine.net/openafs/bins/${version}/macos
            distfiles OpenAFS-${version}-osxsna3-${mp.name}.dmg
            extract.only OpenAFS-${version}-osxsna3-${mp.name}.dmg
            use_dmg yes
            post-extract {
                move ${workpath}/${distname} ${workpath}/openafs-dmg
                system -W ${workpath}/openafs-dmg "pkgutil --expand 'OpenAFS.pkg' ${workpath}/openafs-pkg"
                file mkdir ${workpath}/openafs-unpacked
                system -W ${workpath}/openafs-unpacked "gzip -dc ../openafs-pkg/OpenAFS-dist.pkg/Payload | cpio -id"
            }
            post-patch {
                # OpenAFS libraries have hard-coded paths that must be removed.
                set toolsdir ${workpath}/openafs-unpacked/Library/OpenAFS/Tools
                set libs [glob -directory ${toolsdir} -tails lib/*.dylib]
                set args "-add_rpath ${prefix}/Library/OpenAFS"
                foreach lib $libs {
                    append args " -change /Library/OpenAFS/Tools/${lib} @rpath/${lib}"
                }
                foreach lib $libs {
                    if {[file type "${toolsdir}/${lib}"] ne "link"} {
                        system "install_name_tool $args ${toolsdir}/${lib}"
                        system "codesign --remove-signature ${toolsdir}/${lib}"
                    }
                }
                system "install_name_tool $args ${workpath}/openafs-unpacked/Library/OpenAFS/Tools/root.client/usr/vice/etc/afsd"
                system "codesign --remove-signature ${workpath}/openafs-unpacked/Library/OpenAFS/Tools/root.client/usr/vice/etc/afsd"
            }
            use_configure no
            build {}
            destroot {
                set pkgpath ${workpath}/openafs-unpacked
                file mkdir ${destroot}${prefix}/Library/OpenAFS
                copy ${pkgpath}/Library/OpenAFS/Tools/root.client/usr/vice/etc \
                    ${pkgpath}/Library/OpenAFS/Tools/lib \
                    ${destroot}${prefix}/Library/OpenAFS
                system "dot_clean ${destroot}${prefix}/Library/OpenAFS"

                # Install startup/shutdown script
                copy -force ${filespath}/afs.rc ${destroot}${prefix}/Library/OpenAFS/etc/afs.rc
                reinplace "s|@PREFIX@|${prefix}|g" ${destroot}${prefix}/Library/OpenAFS/etc/afs.rc

                # TODO: Install this config as part of openafs-client?
                # Create default config
                file mkdir ${destroot}${prefix}/etc/openafs
                copy ${pkgpath}/private/var/db/openafs/etc/config/settings.plist.orig ${destroot}${prefix}/etc/openafs/settings.plist
                file mkdir ${destroot}${prefix}/var/db/openafs/cache
                destroot.keepdirs-append ${destroot}${prefix}/var/db/openafs/cache
                system "echo /afs:${prefix}/var/db/openafs/cache:100000 > ${destroot}${prefix}/etc/openafs/cacheinfo"
            }
            startupitem.create yes
            startupitem.autostart yes
            startupitem.start "${prefix}/Library/OpenAFS/etc/afs.rc start"
            startupitem.stop "${prefix}/Library/OpenAFS/etc/afs.rc start"
            startupitem.logfile "${prefix}/var/log/openafs.log"
            post-activate {
                if {[file exists /usr/share/firmlinks]} {
                    if {[catch {system "grep ^afs /etc/synthetic.conf"}]} {
                        system "echo afs >> /etc/synthetic.conf"
                        notes-append {
                            You must restart your computer to create /afs.
                        }
                    }
                } else {
                    if {! [file exists /afs]} {
                        file mkdir /afs
                    }
                }
                system "/usr/libexec/PlistBuddy -c \"Print :SkipPaths:\" /Library/Preferences/com.apple.TimeMachine.plist | grep /afs || /usr/libexec/PlistBuddy -c 'Add :SkipPaths: string \"/afs\"' /Library/Preferences/com.apple.TimeMachine.plist"
                if {[catch {system "kextload ${prefix}/Library/OpenAFS/etc/afs.kext"}]} {
                    notes-append {
                        You must allow the kernel extension to load by visiting the Security
                        preference pane. You can go there by running:
                        open "x-apple.systempreferences:com.apple.preference.security?General"
                    }
                }
            }
        }
    }
}
